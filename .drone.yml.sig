eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgIyBGZXRjaCBmb2xkZXJzIGZyb20gZGlzdHJpYnV0ZWQgY2FjaGUKICBzZnRwX2NhY2hlX3Jlc3RvcmU6CiAgICBpbWFnZTogcGx1Z2lucy9zZnRwLWNhY2hlCiAgICByZXN0b3JlOiB0cnVlCiAgICBtb3VudDoKICAgICAgLSAvZHJvbmUvLml2eTIKICAgICAgLSAvZHJvbmUvLmNvdXJzaWVyLWNhY2hlCiAgICAgIC0gL2Ryb25lLy5zYnQKICAgICAgLSAvZHJvbmUvLmdpdAogICAgd2hlbjoKICAgICAgZXZlbnQ6IFtwdXNoLCBwdWxsX3JlcXVlc3QsIHRhZywgZGVwbG95bWVudF0KCiAgdGVzdHM6CiAgICBpbWFnZTogc2NhbGFwbGF0Zm9ybS9zY2FsYTowLjYKICAgIHB1bGw6IHRydWUKICAgIGVudmlyb25tZW50OgogICAgICAtIENPVVJTSUVSX0NBQ0hFPS9kcm9uZS9jYWNoZS9jb3Vyc2llcgogICAgdm9sdW1lczoKICAgICAgLSAvcGxhdGZvcm06L2tleXMKICAgIGNvbW1hbmRzOgogICAgICAtIGdpdCBsb2cgfCBoZWFkIC1uIDIwCiAgICAgIC0gLi9zY2FsYWZtdCAtLXRlc3QKICAgICAgLSAuL2Jpbi9jb3B5X2NhY2hlLnNoIC9kcm9uZSAvcm9vdAogICAgICAtIC91c3IvYmluL3NidCAkQ0lfVEVTVAogICAgICAtIC4vYmluL2JlZm9yZV9jYWNoZS5zaAogICAgICAtIC4vYmluL2NvcHlfY2FjaGUuc2ggL3Jvb3QgL2Ryb25lCiAgbm90aWZ5OgogICAgaW1hZ2U6IGRyaWxsc3Rlci9kcm9uZS1lbWFpbAogICAgaG9zdDogc210cC5tYWlsZ3VuLm9yZwogICAgdXNlcm5hbWU6IG5vcmVwbHlAZHJvbmUuZ2VpcnNzb24uY29tCiAgICBwYXNzd29yZDogJHtNQUlMR1VOX1BBU1NXT1JEfQogICAgZnJvbTogbm9yZXBseUBkcm9uZS5nZWlyc3Nvbi5jb20KICAgIHJlY2lwaWVudHM6CiAgICAgIC0gb2xhZnVycGdAZ21haWwuY29tCiAgICB3aGVuOgogICAgICBldmVudDogcHVzaAogICAgICBicmFuY2g6IFttYXN0ZXJdCiAgICAgIHN0YXR1czogW2NoYW5nZWQsIGZhaWx1cmVdCgogICMgU2F2ZSBmb2xkZXJzIGluIGRpc3RyaWJ1dGVkIGNhY2hlCiAgc2Z0cF9jYWNoZV9yZWJ1aWxkOgogICAgaW1hZ2U6IHBsdWdpbnMvc2Z0cC1jYWNoZQogICAgcmVidWlsZDogdHJ1ZQogICAgbW91bnQ6CiAgICAgIC0gL2Ryb25lLy5pdnkyCiAgICAgIC0gL2Ryb25lLy5jb3Vyc2llci1jYWNoZQogICAgICAtIC9kcm9uZS8uc2J0CiAgICAgIC0gL2Ryb25lLy5naXQKbWF0cml4OgogIGluY2x1ZGU6CiAgICAtIENJX1RFU1Q6IGNpLWZhc3QKICAgICAgQ0lfU0NBTEFfVkVSU0lPTjogMi4xMS44CiAgICAjIFNlZSBodHRwczovL2dpdGh1Yi5jb20vc2NhbGFjZW50ZXIvc2NhbGFmaXgvaXNzdWVzLzEwMQogICAgIyAtIENJX1RFU1Q6IGNpLWZhc3QKICAgICMgICBDSV9TQ0FMQV9WRVJTSU9OOiAyLjEyLjEKICAgIC0gQ0lfVEVTVDogY2ktc2xvdwogICAgICBDSV9TQ0FMQV9WRVJTSU9OOiAyLjExLjgK.kALWXJUcY8qVvXdeTWwbRhT82ykVHGFHNHM_mZXzyJE