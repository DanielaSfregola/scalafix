@import Main._
@import scalafix.Readme._
@import scalafix.rewrite._

@sect{Rewrites}
  @p
    Scalafix is a very new tool, more rewrite rules will come in future releases.

  @sect(ExplicitImplicit.toString)
    Dotty requires implicit @code{val}s and @code{def}s to explicitly annotate
    return types.
    The @ExplicitImplicit.toString rewrite inserts the inferred type from the
    compiler for implicit definitions that are missing an explicit return type.
    For example,

    @hl.scala
      // before
      implicit val tt = liftedType
      // after
      implicit val tt: TypedType[R] = liftedType

    @ul
      @li
        scalafix tries to minimize the inserted type signature, by using
        available variable names in scope.
      @li
        scalafix will insert the fully qualified type name if the type
        is not in scope.

  @sect(ProcedureSyntax.toString)
    "Procedure syntax" is not supported in Dotty.
    Methods that use procedure syntax should use regular method syntax instead.
    For example,

    @hl.scala
      // before: procedure syntax
      def main(args: Seq[String) {
        println("Hello world!")
      }
      // after: regular syntax
      def main(args: Seq[String): Unit = {
        println("Hello world!")
      }

  @sect(VolatileLazyVal.toString)
    @p
      Adds a @code{@@volatile} annotation to lazy vals.
      The @code{@@volatile} annotation is needed to maintain thread-safe
      behaviour of lazy vals in Dotty.

    @hl.scala
      // before
      lazy val x = ...
      // after
      @@volatile lazy val x = ...

    @p
      With @code{@@volatile}, Dotty uses a deadlock free scheme that is
      comparable-if-not-faster than the scheme used in scalac.


  @sect{Upcoming rewrites...}
    @ul
      @li
        @code{XML}: see @issue(10).
      @li
        @code{ExplicitImplicit}: see @issue(11).
