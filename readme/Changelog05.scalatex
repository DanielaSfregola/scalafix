@import Main._
@import scalafix.Readme._
@import scalafix.Versions

@sect{0.5.0}
  @p
    @note This changelog is still incomplete and will be updated before the
    final 0.5.0 release.

  @h4{New features for end users}
    @users
  @p
    This release introduces major improvements to @sect.ref{sbt-scalafix},
    @sect.ref{scalafix-cli}.
  @ul
    @li
      @code{scalafixBuild} task in @sect.ref{sbt-scalafix} to run rewrites
      on build sources.
    @li
      @sect.ref{Sbt1} rewrite to migrate usage of deprecated sbt 0.13 APIs,
      by @user{jvican}.
    @li
      Scala.js support for @sect.ref{scalafix-core}, by @user{gabro}.
    @li
      Configurable @sect.ref{ExplicitReturnTypes}, by @user{taisuke}.
    @li
      Configurable @sect.ref{lint} reporting.
    @li
      @sect.ref{sbt-scalafix} rewrite tab completion.
    @li
      @sect.ref{scalafix-cli} @code{--zsh} and @code{--bash} to generate tab
      completion scripts for zsh and bash.
    @li
      @sect.ref{scalafix-cli} automatically inferences semantic/syntactic rewrites.
      This means it's possible to run custom syntactic rewrites from scalafix-cli
      without passing in @code{--classpath}.
    @li
      @sect.ref{replace:} to run quick one-off refactorings.

  @h4{New features for rewrite authors}
    @authors
  @ul
    @li
      Ability to implement rewrites for sources of sbt builds, including
      @code{*.sbt} files. The API to write sbt rewrites is identical to
      regular Scala rewrites.
    @li
      Rewrites can now emit lint messages with @code{ctx.lint}, see
      @sect.ref{LintMessage}.
    @li
      Rewrites can have multiple names with optional deprecation warnings.
    @li
      Thanks to upstream improvements in the
      @lnk("Scalameta v2.0 Semantic API", "http://scalameta.org/tutorial/#SemanticAPI"),
      it is now possible to query symbols of inferred
      @ul
        @li
          implicit arguments
        @li
          implicit conversions (including extension methods)
        @li
          type parameters
        @li
          @code{.apply}/@code{.unapply}
    @li
      @code{PatchOps.replaceSymbol/replaceTree}, see @sect.ref{Patch}.

  @h4{Bug fixes / Improvements}

  @ul
    @li
      More robust classloading to invoke scalafix in @sect.ref{sbt-scalafix}.
      Previously, sbt-scalafix used synthetic projects which cause problem
      in some multi-module builds. Now, sbt-scalafix uses Coursier instead.
    @li
      Improved dynamic compilation of @sect.ref{Custom rewrites} while running
      from multi-module sbt builds.
    @li
      Extension methods now resolve to the correct symbol. For example,
      @code{head} in @code{Array[Int].head} previously resolved to
      @code{Predef.intArrayOps} and now it resolves to
      @code{IndexedSeqOptimized.head}.

  @h4{Breaking changes for rewrite authors}
  @p
    From 0.5 onwards, our CI will check binary breaking changes in the public API
    on every pull request.
    Note that modules inside the package @code{scalafix.internal} don't promise
    binary compatibility between any releases, including PATCH upgrades.

  @ul
    @li
      @code{scala.meta.Mirror} is now @code{scalafix.SemanticCtx}.
    @li
      @code{scalafix.config} has been moved to @code{scalafix.internal.config}.
      Configuration case classes break binary compatility with every new field.
    @li
      @code{.symbol} now returns @code{Option[Symbol]} instead of @code{Symbol}.
      @code{.symbolOpt} has been deprecated.
    @li
      A large number of unused methods and classes inside @code{scalafix.Failure},
      @code{scalafix.`package`} and @code{scalafix.syntax} has been removed.
    @li
      upgraded to Scalameta 2.0, which has several breaking changes
      in the Tree api.

