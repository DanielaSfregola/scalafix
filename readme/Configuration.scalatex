@import Main._
@import scalafix.Readme._
@sect{Configuration}
  @p
    Scalafix reads configuration from a file using
    @lnk("HOCON", "https://github.com/typesafehub/config")
    syntax.
    I recommend you put a file @code{.scalafix.conf} into the root directory of
    your project.

  @sect{rewrites}
    The "rewrites" section has been renamed to "@sect.ref{rules}".

  @sect{rules}
    You can either run a pre-made that comes with scalafix or a custom rule
    that you write yourself.

    @sect{Pre-made rules}
      Available rules are listed in @sect.ref{Rules}.

      @config
        rules = [ProcedureSyntax] # No rules are run if empty.

    @sect{Custom rules}
      Scalafix supports loading rules from a few different
      URI protocols.

      @sect{scala:}
        If a rules is on the classpath, you can classload it with the
        @code{scala:} protocol.
        @config
          rule = "scala:scalafix.internal.rule.ProcedureSyntax"

      @sect{github:}
        If a rule is written in a single file and you want a short syntax,
        you can use the @code{github:} protocol for sharing your rule

        @hl.scala
          rule = "github:typelevel/cats/v1.0.0"
          // expands into @githubSyntax("typelevel/cats/v1.0.0").get

      @sect{replace:}

        @experimental

        To replace usage of one class/object/trait/def with another.
        Note, does not move definitions like "Move" does in an IDE. This
        only moves use-sites.

        @config
          rule = "replace:com.company.App/io.company.App"
          // From sbt shell: > scalafix replace:from/to

        To rename a method

        @config
          rule = "replace:com.company.App.start/init"

      @sect{file:}
        If a rules is written in a single file on disk, you can load it
        with the @code{file:} protocol.
        @config
          rule = "file:readme/MyRule.scala" // from local file

      @sect{http:}
        If a rule is written in a single source file on the internet,
        you can load it with the @code{https:} or @code{http:} protocol
        @config
          rule = "https://gist.githubusercontent.com/olafurpg/fc6f43a695ac996bd02000f45ed02e63/raw/f96587ec5afe8ed139b2c543c65a417dcafca79e/ExampleRewrite.scala"

  @sect{lint}
    Override the default severity level of a @sect.ref{LintMessage} with @code{lint}
    @config
      // Assuming 'Foo' is a rule and 'warningID'/'errorID' are LintCategory IDs.
      lint.error = [ Foo.warningID ] // promote Foo.warnigID to an error
      lint.warning = [ Foo.errorID ] // demote Foo.errorID to a warning
      lint.info = [ Foo.errorID ] // demote Foo.errorID to info
      lint.ignore = [ Foo.errorID ] // don't report Foo.errorID
      lint.explain = true // print out detailed explanation for lint messages.

  @sect{patches}
    For simple use-cases, it's possible to write custom rules directly in
    .scalafix.conf.
    @config
      patches.removeGlobalImports = [
        "scala.collection.mutable" // scala.meta.Importee
      ]
      patches.addGlobalImports = [
        "scala.collection.immutable"
      ]
      patches.replaceSymbols = [
        { from = "scala.collection.mutable.ListBuffer"
          to   = "com.geirsson.mutable.CoolBuffer" }
      ]
      // Helper to see which symbols appear in your source files
      debug.printSymbols = true
    For more advanced use-cases, I recommend you use see
    @sect.ref{Creating your own rule}.


