@import Main._
@import scalafix.Readme._
@import scalafix.Versions

@sect{0.4.2}
  @ul
    @li
      Fixed @issue(200), thank you @user{xuwei-k} for reporting.
    @li
      New section documenting how to implement rules, see
      @sect.ref{Creating your own rule}.
    @li
      In particular, @sect.ref{scalacenter/scalafix.g8}
@sect{0.4.1}
  First of all, I'd like to welcome Gabriele Petronella, @user{gabro}, to the
  @lnk("scalafix team", "https://github.com/scalacenter/scalafix#team")! See @pr(184).

  @ul
    @li
      New rule @code{NoExtendsApp} (removed in v0.5), by @user{gabro}.
    @li
      New rule @sect.ref{DottyVarArgPattern}, by @user{gosubpl}.
    @li
      Errors in the @sect.ref{scalafix-testkit} docs have now been fixed, by @user{taisukeoe}.
    @li
      @code{--sourceroot} is now used by scalafix-cli, @issue(176).
    @li
      @code{--sourcepath} is no longer used by scalafix-cli.
    @li
      @sect.ref{NoAutoTupling} now handles Function1 signatures,
      see @issue(147).
    @li
      scalafix-cli now supports @code{--include} and @code{--exclude}
      to filter which files get fixed. See @sect.ref{--help} for more details.
    @li
      @sect.ref{RemoveUnusedImports} now also removes unused renamed imports,
      see @issue(189).

  Big thanks you everybody who contributed this release via issues, pull requests,
  online discussions on @gitter and and offline discussions at Scaladays Copenhagen last week!

@sect{0.4.0}
  @p
    This release represents a significant milestone for Scalafix.
    Scalafix no longer runs as a compiler plugin as it did in previous releases.
    Instead, Scalafix runs now independently from the compiler, and uses the
    @lnk("Scalameta Semantic API",
         "https://github.com/scalameta/scalameta/blob/master/changelog/1.8.0.md")
    to query information from the compiler.

  @h4{New features}

  @ul
    @li
      New rule @sect.ref{RemoveUnusedImports}, by @user{olafurpg}.
    @li
      New rule @sect.ref{RemoveXmlLiterals}, by @user{allanrenucci}.
    @li
      New rule @sect.ref{NoAutoTupling}, by @user{gabro}.
    @li
      New rule @sect.ref{ExplicitUnit}, by @user{gabro}.
    @li
      New rule @sect.ref{NoValInForComprehension}, by @user{gabro}.
    @li
      New @sect.ref{github:} protocol for loading rules, by @user{gabro}.
    @li
      Improved @sect.ref{scalafix-testkit}, by @user{olafurpg}.
    @li
      Simplified Rule API. The public API has shrunk down to
      four types: @code{Rule}, @code{Patch}, @code{ScalafixConfig} and
      @code{RuleCtx}. The type parameters on @code{Rule} and @code{RuleCtx}
      have been removed. A single @code{import scalafix._} is enough get
      started with rules.
    @li
      See the
      @lnk("Scalameta Semantic API", "https://github.com/scalameta/scalameta/blob/master/changelog/1.8.0.md").

  @h4{Breaking changes}

  @ul
    @li
      The @code{scalafix-nsc} compiler plugin has been removed in favor of
      the @lnk("Scalameta Semantic DB", "https://github.com/scalameta/scalameta/blob/master/changelog/1.8.0.md#semantic-db"),
      that is emitted by the Scalameta @code{semanticdb-scalac} compiler plugin.
      This change enables Scalafix rules to run separately from compilation.
      This means that running scalafix will be much faster, since it no longer
      requires creating a custom instance of the Scala compiler and re-typechecking
      an entire project. Scalafix reads all of its inputs from @code{.semanticdb}
      files that are created by the semanticdb-scalac compiler plugin during regular compilation.
    @li
      The signature of @code{Rule.rule} has been simplified
      @hl.scala
        // before
        def rule[T](ctx: RuleCtx[T]): Seq[Patch]
        // after
        def rule(ctx: RuleCtx): Patch

        // a Seq[Patch] can be converted into Patch with .asPatch
        Seq[Patch]().asPatch: Patch
    @li
      @code{RuleCtx.mirror} has been removed. To write semantic rules,
      accept @code{SemanticCtx} as a constructor parameter instead
      @hl.scala
        // before
        case object MySemanticRule extends Rule {
          def rule[T](ctx: RuleCtx[T]): Seq[Patch]
        }
        // after
        case class MySemanticRule(index: SemanticdbIndex) extends SemanticRule(index) {
          def rule(ctx: RuleCtx): Patch
        }
    @li
      @code{scalafix.patch.TreePatch.{AddGlobalImport, RemoveGlobalImport, Replace, ...}}
      have been made @code{private[scalafix]}. Instead, use the provided operations
      on @code{ctx: RuleCtx}.


      @hl.scala
        // before
        TokenPatch.AddGlobalImport(importer"scala.meta._")

        // after
        ctx.addGlobalImport(importer"scala.meta._")

      The motivation for this change was to statically enforce that a @code{SemanticCtx}
      is in scope during Patch creation.
      For the full available API of patch operations, see
      @lnk("SemanticPatchOps",
        "https://github.com/scalacenter/scalafix/blob/db6152304aaef19c4a8ba4fc77b732264bf52fec/scalafix-core/src/main/scala/scalafix/rule/SemanticPatchOps.scala")
    @li
      The following configuration options have been removed
      @hl.scala
        imports.removeUnusedImports // replaced by RemoveUnusedImports rule.

        // These were wishful thinking, too eagerly merged.
        imports.organizeImports
        imports.expandRelative
        imports.groupByPrefix
    @li
      scalafix-cli now enabled the @code{--in-place (-i)} flag by default.
      Use @code{--stdout} to print to standard output.
    @li
      scalafix-testkit no longer reads tests from @code{.source} files.
      Instead, tests are written in regular @code{.scala} files that are
      compiled through sbt or another build tool.
      See @sect.ref{scalafix-testkit} for how to use it.

  @code{git shortlog -sn --no-merges v0.3.0..v0.4.0} tells us that 4 people
  contributed to this release:
  @ul
    @li
      Ólafur Páll Geirsson
    @li
      Gabriele Petronella
    @li
      Allan Renucci
    @li
      Matthias Langer
