@import Main._
@import scalafix.Readme._

@sect{Changelog}
  @sect{0.3.1}
    @ul
      @li
        Fixed a bug in organize imports when there was no import in the
        original source file.
      @li
        Patch.apply and OrganizeImports no longer accept a redundant @code{tree: Tree} argument, the
        @code{ctx} already contains the tree.
      @li
        Xor2Either is disabled by default now, it was enabled by default
        causing the @code{scalafix} command to slow down significantly.
        Rewrites using @code{scala.meta.Mirror} should not experience a
        slowdown.
      @li
        Added new @code{Rename(from: Name, to: Name)} tree patch that's
        accesible via the scalafix-library.
  @sect{0.3.0}
    @ul
      @li
        Scalafix now uses the scala.meta semantic API!
        See @lnk("scala.meta 1.6 release notes",
        "https://github.com/scalameta/scalameta/blob/master/changelog/1.6.0.md#semantic-api")
        for more details about the semantic api.
        This first release of the scala.meta semantic API enables rewrites to query for the "symbol"
        of a name that appears in a Scala source file.
        A symbol is a unique identifier of a definition such as a class, val, def or trait.
      @li
        To demonstrate the capabilities of rewrites using the scala.meta semantic API,
        we have included an example rewrite called @lnk(
          "Xor2Either",
          "https://github.com/scalacenter/scalafix/blob/master/core/src/main/scala/scalafix/rewrite/Xor2Either.scala"
        ).
        The rewrite migrates usage of @code{cats.data.Xor} to @code{scala.util.Either}.
      @li
        Rewrites can now be implemented in terms of "tree patches", which are high
        level descriptions of common refactoring operations.
        Tree patches can be composed to build more advanced refactorings
        such as @code{Xor2Either}.
        The current available tree patches are
        @ul
          @li
            @code{Replace}: Replaces usage of a symbol with another name.
          @li
            @code{AddGlobalImport}: Adds a top-level import to source file.
          @li
            @code{RemoveGlobalImport}: Removes a top-level import from source file.
        @p
          Special thanks go to @user{ShaneDelmore} for helping out try the
          scalafix patch API at every step of its development. His feedback has
          been invaluable in improving the design of the API.
      @li
        Configuration in .scalafix.conf has been greatly improved to support a wide range
        of options.
        Examples, see @sect.ref{patches}, @sect.ref{imports} and @sect.ref{All options}.
  @sect{0.2.1}
    @ul
      @li
        @code{sbt scalafix} runs @code{ExplicitImplicit} and @code{ProcedureSyntax}
        by default when there is no @code{.scalafix.conf}.
      @li
        Upgraded scala.meta dependency to fix parsing + pretty-printer bugs.
  @sect{0.2.0}
    @ul
      @li
        First semantic rewrite! See @sect.ref{ExplicitImplicit}
      @li
        Removed command line interface in favor of compiler plugin.
        Why? To run semantic rewrites, scalafix needs to compile source files.
        The scalafix command line tool has no aspiration to become a build tool.
  @sect{0.1.0}
    @ul
      @li
        New command line tool: @code{scalafix}.
        (EDIT: superseded by scalafix-nsc compiler plugin in v0.2)
      @li
        New SBT plugin: @code{sbt-scalafix}. See @sect.ref{sbt-scalafix}.
      @li
        Two rewrite rules:
        @sect.ref{ProcedureSyntax}
        and
        @sect.ref{VolatileLazyVal}.
